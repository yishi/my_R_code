
# book practical data science cookbook 
# chapter 5 visually exploring employment data
library(data.table)
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(maps)
library(bit64)
library(RColorBrewer)
library(choroplethr)

# read main data 
ann2012 <- fread('test/2012.annual.singlefile.csv')
head(ann2012)
dim(ann2012)
ann2012 <- ann2012[, 1:15, with = FALSE]

# read some data 
for (u in c('agglevel', 'area', 'industry', 'ownership', 'size')) {
  assign(u, read.csv(paste('test/', u, '_titles.csv', sep = ''), 
                     stringsAsFactors = FALSE))
}

# merge data
codes <- c('agglevel', 'industry', 'ownership', 'size')
ann2012full <- ann2012

for (i in 1:length(codes)) {
  eval(parse(text = paste('ann2012full <- left_join(ann2012full,', 
                          codes[i], ')', sep = '')))
}

agglevel$agglvl_code <- as.character(agglevel$agglvl_code)
ann2012full <- left_join(ann2012full, data.table(agglevel))

ann2012full <- left_join(ann2012full, data.table(industry))

ownership$own_code <- as.character(ownership$own_code)
ann2012full <- left_join(ann2012full, data.table(ownership))

size$size_code <- as.character(size$size_code)
ann2012full <- left_join(ann2012full, data.table(size))

# add geographical information

simpleCap <- function(x) {
  if (!is.na(x)) {
    s <- strsplit(x, ' ')[[1]]
    paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = '', collapse = ' ')
  }
}

data(county.fips)
head(county.fips)
county.fips$fips <- str_pad(county.fips$fips, width = 5, pad = "0")
county.fips$polyname <- as.character(county.fips$polyname)
county.fips$county <- sapply(gsub('[a-z\ ]+,([a-z\ ]+)', '\\1', county.fips$polyname), simpleCap)

data(state.fips)
head(state.fips)
state.fips$fips <- str_pad(state.fips$fips, width = 2, pad = "0", side = "left")
state.fips$state <- as.character(state.fips$polyname)
state.fips$state <- gsub("([a-z\ ]+):[a-z\ \\']+", 
                         '\\1', state.fips$state)
state.fips$state <- sapply(state.fips$state, simpleCap)
mystatefips <- unique(state.fips[, c('fips', 'abb', 'state')])

lower48 <- setdiff(unique(state.fips$state), c('Hawaii', 'Alaska'))

myarea <- merge(area, county.fips, by.x = 'area_fips', by.y = 'fips', all.x = T)
myarea$state_fips <- substr(myarea$area_fips, 1, 2)
myarea <- merge(myarea, mystatefips, by.x = 'state_fips', by.y = 'fips', all.x  = T)

ann2012full <- left_join(ann2012full, data.table(myarea))
ann2012full <- filter(ann2012full, state %in% lower48)

save(ann2012full, file = 'test/ann2012full.rda', compress = T)

# extracting state- and county-level wage and employment information
d.state <- filter(ann2012full, agglvl_code == 50)
d.state <- select(d.state, state, avg_annual_pay, annual_avg_emplvl)

d.state$wage <- cut(d.state$avg_annual_pay,
                    quantile(d.state$avg_annual_pay, c(seq(0, .8, by = .2), .9, .95, .99, 1)))
d.state$empquantile <- cut(d.state$annual_avg_emplvl, 
                           quantile(d.state$annual_avg_emplvl, c(seq(0, .8, by = .2), .9, .95, .99, 1)))

x <- quantile(d.state$avg_annual_pay, c(seq(0, .8, by = .2), .9, .95, .99, 1))
xx <- paste(round(x/1000), 'K', sep = "")
labs <- paste(xx[-length(xx)], xx[-1], sep = "-")
levels(d.state$wage) <- labs

xb <- quantile(d.state$annual_avg_emplvl, c(seq(0, .8, by = .2), .9, .95, .99, 1))
xxb <- ifelse(xb > 1000, paste(round(xb/1000), 'K', sep = ''), 
              round(xb))
labsb <- paste(xxb[-length(xxb)], xxb[-1], sep = "-")
levels(d.state$empquantile) <- labsb

Discretize <- function(x, breaks = NULL) {
  if(is.null(breaks)) {
    breaks <- quantile(x, c(seq(0, .8, by =.2), .9, .95, .99, 1))
    if (sum(breaks == 0) > 1) {
      temp <- which(breaks == 0, arr.ind = TRUE)
      breaks <- breaks[max(temp):length(breaks)]
    }
  }
  x.discrete <- cut(x, breaks, include.lowest = TRUE)
  breaks.eng <- ifelse(breaks > 1000, 
                       paste0(round(breaks/1000), 'K'),
                       round(breaks))
  labs <- paste(breaks.eng[-length(breaks.eng)], breaks.eng[-1], sep = '-')
  levels(x.discrete) <- labs
  return(x.discrete)
}

d.city <- filter(ann2012full, agglvl_code == 70) %.%
  select(state, county, abb, avg_annual_pay, annual_avg_emplvl) %.%
  mutate(wage = Discretize(avg_annual_pay), 
         empquantile = Discretize(annual_avg_emplvl))

# visualizing geographical distributions of pay
state_df <- map_data('state')
county_df <- map_data('county')

transform_mapdata <- function(x) {
  names(x)[5:6] <- c('state', 'county')
  for(u in c('state', 'county')) {
    x[, u] <- sapply(x[, u], simpleCap)
  }
  return(x)
}

state_df <- transform_mapdata(state_df)
county_df <- transform_mapdata(county_df)

chor <- left_join(state_df, d.state, by = 'state')
ggplot(chor, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = wage)) +
  geom_path(color = 'black', size = 0.2) +
  scale_fill_brewer(palette = 'PuRd') +
  theme(axis.text.x = element_blank(), 
        axis.text.y = element_blank(), 
        axis.ticks.x = element_blank(), 
        axis.ticks.y = element_blank())

chorb <- left_join(county_df, d.city)
ggplot(chorb, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = wage)) +
  geom_path(color = 'white', alpha = 0.5, size = 0.2) +
  geom_polygon(data = state_df, color = 'black', fill = NA) +
  scale_fill_brewer(palette = 'PuRd') +
  theme(axis.text.x = element_blank(), 
        axis.text.y = element_blank(), 
        axis.ticks.x = element_blank(), 
        axis.ticks.y = element_blank())

# exploring where the jobs are, by industry
d.sectors <- filter(ann2012full, industry_code %in% c(11, 21, 54, 52),
                    own_code == 5, # private sector
                    agglvl_code == 74 # county-level
) %>%
  select(state, county, industry_code, own_code, agglvl_code, 
         industry_title, own_title, avg_annual_pay, 
         annual_avg_emplvl) %>%
  mutate(wage = Discretize(avg_annual_pay), 
         emplevel = Discretize(annual_avg_emplvl))

chorc <- left_join(county_df, d.sectors)
chorc <- filter(chorc, !is.na(industry_title))

ggplot(chorc, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = emplevel)) +
  geom_polygon(data = state_df, color = 'black', fill = NA) +
  scale_fill_brewer(palette = 'PuBu') +
  facet_wrap(~ industry_title, ncol = 2, as.table = T) +
  theme(axis.text.x = element_blank(), 
        axis.text.y = element_blank(), 
        axis.ticks.x = element_blank(), 
        axis.ticks.y = element_blank())
